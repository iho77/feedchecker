// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson821c4f17DecodeGithubComIpsearch(in *jlexer.Lexer, out *kafkaMsgOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "logsource":
			out.Logsource = string(in.String())
		case "class":
			out.Logtype = string(in.String())
		case "@timestamp":
			out.Timestamp = string(in.String())
		case "type":
			out.ProjID = string(in.String())
		case "orgid":
			out.OrgID = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "summary":
			out.Summary = string(in.String())
		case "desc":
			out.Description = string(in.String())
		case "srcip":
			out.SrcIP = string(in.String())
		case "dstip":
			out.DstIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson821c4f17EncodeGithubComIpsearch(out *jwriter.Writer, in kafkaMsgOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"logsource\":"
		out.RawString(prefix[1:])
		out.String(string(in.Logsource))
	}
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix)
		out.String(string(in.Logtype))
	}
	{
		const prefix string = ",\"@timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.ProjID))
	}
	{
		const prefix string = ",\"orgid\":"
		out.RawString(prefix)
		out.String(string(in.OrgID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix)
		out.String(string(in.Summary))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"srcip\":"
		out.RawString(prefix)
		out.String(string(in.SrcIP))
	}
	{
		const prefix string = ",\"dstip\":"
		out.RawString(prefix)
		out.String(string(in.DstIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v kafkaMsgOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson821c4f17EncodeGithubComIpsearch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v kafkaMsgOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson821c4f17EncodeGithubComIpsearch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *kafkaMsgOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson821c4f17DecodeGithubComIpsearch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *kafkaMsgOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson821c4f17DecodeGithubComIpsearch(l, v)
}
func easyjson821c4f17DecodeGithubComIpsearch1(in *jlexer.Lexer, out *kafkaMsgIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "logsource":
			out.Logsource = string(in.String())
		case "srcip":
			out.SrcIP = string(in.String())
		case "dstip":
			out.DstIP = string(in.String())
		case "@timestamp":
			out.Time = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson821c4f17EncodeGithubComIpsearch1(out *jwriter.Writer, in kafkaMsgIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"logsource\":"
		out.RawString(prefix[1:])
		out.String(string(in.Logsource))
	}
	{
		const prefix string = ",\"srcip\":"
		out.RawString(prefix)
		out.String(string(in.SrcIP))
	}
	{
		const prefix string = ",\"dstip\":"
		out.RawString(prefix)
		out.String(string(in.DstIP))
	}
	{
		const prefix string = ",\"@timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v kafkaMsgIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson821c4f17EncodeGithubComIpsearch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v kafkaMsgIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson821c4f17EncodeGithubComIpsearch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *kafkaMsgIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson821c4f17DecodeGithubComIpsearch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *kafkaMsgIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson821c4f17DecodeGithubComIpsearch1(l, v)
}
